// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kpfs

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opDeletePerformanceOnePosixAcl = "DeletePerformanceOnePosixAcl"

// DeletePerformanceOnePosixAclRequest generates a "ksc/request.Request" representing the
// client's request for the DeletePerformanceOnePosixAcl operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeletePerformanceOnePosixAcl for more information on using the DeletePerformanceOnePosixAcl
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DeletePerformanceOnePosixAclRequest method.
//	req, resp := client.DeletePerformanceOnePosixAclRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kpfs-2024-09-30/DeletePerformanceOnePosixAcl
func (c *Kpfs) DeletePerformanceOnePosixAclRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeletePerformanceOnePosixAcl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeletePerformanceOnePosixAcl API operation for kpfs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kpfs's
// API operation DeletePerformanceOnePosixAcl for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kpfs-2024-09-30/DeletePerformanceOnePosixAcl
func (c *Kpfs) DeletePerformanceOnePosixAcl(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeletePerformanceOnePosixAclRequest(input)
	return out, req.Send()
}

// DeletePerformanceOnePosixAclWithContext is the same as DeletePerformanceOnePosixAcl with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePerformanceOnePosixAcl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kpfs) DeletePerformanceOnePosixAclWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeletePerformanceOnePosixAclRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribePerformanceOnePosixAclList = "DescribePerformanceOnePosixAclList"

// DescribePerformanceOnePosixAclListRequest generates a "ksc/request.Request" representing the
// client's request for the DescribePerformanceOnePosixAclList operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribePerformanceOnePosixAclList for more information on using the DescribePerformanceOnePosixAclList
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribePerformanceOnePosixAclListRequest method.
//	req, resp := client.DescribePerformanceOnePosixAclListRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kpfs-2024-09-30/DescribePerformanceOnePosixAclList
func (c *Kpfs) DescribePerformanceOnePosixAclListRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribePerformanceOnePosixAclList,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribePerformanceOnePosixAclList API operation for kpfs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kpfs's
// API operation DescribePerformanceOnePosixAclList for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kpfs-2024-09-30/DescribePerformanceOnePosixAclList
func (c *Kpfs) DescribePerformanceOnePosixAclList(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribePerformanceOnePosixAclListRequest(input)
	return out, req.Send()
}

// DescribePerformanceOnePosixAclListWithContext is the same as DescribePerformanceOnePosixAclList with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePerformanceOnePosixAclList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kpfs) DescribePerformanceOnePosixAclListWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribePerformanceOnePosixAclListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdatePerformanceOnePosixAcl = "UpdatePerformanceOnePosixAcl"

// UpdatePerformanceOnePosixAclRequest generates a "ksc/request.Request" representing the
// client's request for the UpdatePerformanceOnePosixAcl operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See UpdatePerformanceOnePosixAcl for more information on using the UpdatePerformanceOnePosixAcl
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the UpdatePerformanceOnePosixAclRequest method.
//	req, resp := client.UpdatePerformanceOnePosixAclRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kpfs-2024-09-30/UpdatePerformanceOnePosixAcl
func (c *Kpfs) UpdatePerformanceOnePosixAclRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdatePerformanceOnePosixAcl,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdatePerformanceOnePosixAcl API operation for kpfs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kpfs's
// API operation UpdatePerformanceOnePosixAcl for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kpfs-2024-09-30/UpdatePerformanceOnePosixAcl
func (c *Kpfs) UpdatePerformanceOnePosixAcl(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdatePerformanceOnePosixAclRequest(input)
	return out, req.Send()
}

// UpdatePerformanceOnePosixAclWithContext is the same as UpdatePerformanceOnePosixAcl with the addition of
// the ability to pass a context and additional request options.
//
// See UpdatePerformanceOnePosixAcl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kpfs) UpdatePerformanceOnePosixAclWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdatePerformanceOnePosixAclRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

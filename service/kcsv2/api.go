// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kcsv2

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opAddCacheSlaveNode = "AddCacheSlaveNode"

// AddCacheSlaveNodeRequest generates a "ksc/request.Request" representing the
// client's request for the AddCacheSlaveNode operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AddCacheSlaveNode for more information on using the AddCacheSlaveNode
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the AddCacheSlaveNodeRequest method.
//    req, resp := client.AddCacheSlaveNodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcs-2017-04-01/AddCacheSlaveNode
func (c *Kcsv2) AddCacheSlaveNodeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddCacheSlaveNode,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AddCacheSlaveNode API operation for kcsv2.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcsv2's
// API operation AddCacheSlaveNode for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcs-2017-04-01/AddCacheSlaveNode
func (c *Kcsv2) AddCacheSlaveNode(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddCacheSlaveNodeRequest(input)
	return out, req.Send()
}

// AddCacheSlaveNodeWithContext is the same as AddCacheSlaveNode with the addition of
// the ability to pass a context and additional request options.
//
// See AddCacheSlaveNode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcsv2) AddCacheSlaveNodeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddCacheSlaveNodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCacheSlaveNode = "DeleteCacheSlaveNode"

// DeleteCacheSlaveNodeRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteCacheSlaveNode operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteCacheSlaveNode for more information on using the DeleteCacheSlaveNode
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteCacheSlaveNodeRequest method.
//    req, resp := client.DeleteCacheSlaveNodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcs-2017-04-01/DeleteCacheSlaveNode
func (c *Kcsv2) DeleteCacheSlaveNodeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteCacheSlaveNode,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteCacheSlaveNode API operation for kcsv2.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcsv2's
// API operation DeleteCacheSlaveNode for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcs-2017-04-01/DeleteCacheSlaveNode
func (c *Kcsv2) DeleteCacheSlaveNode(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteCacheSlaveNodeRequest(input)
	return out, req.Send()
}

// DeleteCacheSlaveNodeWithContext is the same as DeleteCacheSlaveNode with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCacheSlaveNode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcsv2) DeleteCacheSlaveNodeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteCacheSlaveNodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCacheReadonlyNode = "DescribeCacheReadonlyNode"

// DescribeCacheReadonlyNodeRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeCacheReadonlyNode operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeCacheReadonlyNode for more information on using the DescribeCacheReadonlyNode
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeCacheReadonlyNodeRequest method.
//    req, resp := client.DescribeCacheReadonlyNodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcs-2017-04-01/DescribeCacheReadonlyNode
func (c *Kcsv2) DescribeCacheReadonlyNodeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCacheReadonlyNode,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCacheReadonlyNode API operation for kcsv2.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcsv2's
// API operation DescribeCacheReadonlyNode for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcs-2017-04-01/DescribeCacheReadonlyNode
func (c *Kcsv2) DescribeCacheReadonlyNode(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCacheReadonlyNodeRequest(input)
	return out, req.Send()
}

// DescribeCacheReadonlyNodeWithContext is the same as DescribeCacheReadonlyNode with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCacheReadonlyNode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcsv2) DescribeCacheReadonlyNodeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCacheReadonlyNodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

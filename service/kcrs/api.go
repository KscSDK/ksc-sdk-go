// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kcrs

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opCloseExternalEndpoint = "CloseExternalEndpoint"

// CloseExternalEndpointRequest generates a "ksc/request.Request" representing the
// client's request for the CloseExternalEndpoint operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CloseExternalEndpoint for more information on using the CloseExternalEndpoint
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CloseExternalEndpointRequest method.
//    req, resp := client.CloseExternalEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CloseExternalEndpoint
func (c *Kcrs) CloseExternalEndpointRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCloseExternalEndpoint,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CloseExternalEndpoint API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation CloseExternalEndpoint for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CloseExternalEndpoint
func (c *Kcrs) CloseExternalEndpoint(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CloseExternalEndpointRequest(input)
	return out, req.Send()
}

// CloseExternalEndpointWithContext is the same as CloseExternalEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See CloseExternalEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) CloseExternalEndpointWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CloseExternalEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateExternalEndpointPolicy = "CreateExternalEndpointPolicy"

// CreateExternalEndpointPolicyRequest generates a "ksc/request.Request" representing the
// client's request for the CreateExternalEndpointPolicy operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateExternalEndpointPolicy for more information on using the CreateExternalEndpointPolicy
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateExternalEndpointPolicyRequest method.
//    req, resp := client.CreateExternalEndpointPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateExternalEndpointPolicy
func (c *Kcrs) CreateExternalEndpointPolicyRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateExternalEndpointPolicy,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateExternalEndpointPolicy API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation CreateExternalEndpointPolicy for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateExternalEndpointPolicy
func (c *Kcrs) CreateExternalEndpointPolicy(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateExternalEndpointPolicyRequest(input)
	return out, req.Send()
}

// CreateExternalEndpointPolicyWithContext is the same as CreateExternalEndpointPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See CreateExternalEndpointPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) CreateExternalEndpointPolicyWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateExternalEndpointPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInstance = "CreateInstance"

// CreateInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the CreateInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateInstance for more information on using the CreateInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateInstanceRequest method.
//    req, resp := client.CreateInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateInstance
func (c *Kcrs) CreateInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInstance API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation CreateInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateInstance
func (c *Kcrs) CreateInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateInstanceRequest(input)
	return out, req.Send()
}

// CreateInstanceWithContext is the same as CreateInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) CreateInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInstanceToken = "CreateInstanceToken"

// CreateInstanceTokenRequest generates a "ksc/request.Request" representing the
// client's request for the CreateInstanceToken operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateInstanceToken for more information on using the CreateInstanceToken
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateInstanceTokenRequest method.
//    req, resp := client.CreateInstanceTokenRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateInstanceToken
func (c *Kcrs) CreateInstanceTokenRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateInstanceToken,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInstanceToken API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation CreateInstanceToken for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateInstanceToken
func (c *Kcrs) CreateInstanceToken(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateInstanceTokenRequest(input)
	return out, req.Send()
}

// CreateInstanceTokenWithContext is the same as CreateInstanceToken with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInstanceToken for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) CreateInstanceTokenWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateInstanceTokenRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInternalEndpoint = "CreateInternalEndpoint"

// CreateInternalEndpointRequest generates a "ksc/request.Request" representing the
// client's request for the CreateInternalEndpoint operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateInternalEndpoint for more information on using the CreateInternalEndpoint
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateInternalEndpointRequest method.
//    req, resp := client.CreateInternalEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateInternalEndpoint
func (c *Kcrs) CreateInternalEndpointRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateInternalEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInternalEndpoint API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation CreateInternalEndpoint for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateInternalEndpoint
func (c *Kcrs) CreateInternalEndpoint(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateInternalEndpointRequest(input)
	return out, req.Send()
}

// CreateInternalEndpointWithContext is the same as CreateInternalEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInternalEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) CreateInternalEndpointWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateInternalEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInternalEndpointDns = "CreateInternalEndpointDns"

// CreateInternalEndpointDnsRequest generates a "ksc/request.Request" representing the
// client's request for the CreateInternalEndpointDns operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateInternalEndpointDns for more information on using the CreateInternalEndpointDns
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateInternalEndpointDnsRequest method.
//    req, resp := client.CreateInternalEndpointDnsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateInternalEndpointDns
func (c *Kcrs) CreateInternalEndpointDnsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateInternalEndpointDns,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInternalEndpointDns API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation CreateInternalEndpointDns for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateInternalEndpointDns
func (c *Kcrs) CreateInternalEndpointDns(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateInternalEndpointDnsRequest(input)
	return out, req.Send()
}

// CreateInternalEndpointDnsWithContext is the same as CreateInternalEndpointDns with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInternalEndpointDns for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) CreateInternalEndpointDnsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateInternalEndpointDnsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNamespace = "CreateNamespace"

// CreateNamespaceRequest generates a "ksc/request.Request" representing the
// client's request for the CreateNamespace operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateNamespace for more information on using the CreateNamespace
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateNamespaceRequest method.
//    req, resp := client.CreateNamespaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateNamespace
func (c *Kcrs) CreateNamespaceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateNamespace,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateNamespace API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation CreateNamespace for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateNamespace
func (c *Kcrs) CreateNamespace(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateNamespaceRequest(input)
	return out, req.Send()
}

// CreateNamespaceWithContext is the same as CreateNamespace with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNamespace for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) CreateNamespaceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateNamespaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateRetentionRule = "CreateRetentionRule"

// CreateRetentionRuleRequest generates a "ksc/request.Request" representing the
// client's request for the CreateRetentionRule operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateRetentionRule for more information on using the CreateRetentionRule
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateRetentionRuleRequest method.
//    req, resp := client.CreateRetentionRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateRetentionRule
func (c *Kcrs) CreateRetentionRuleRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateRetentionRule,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateRetentionRule API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation CreateRetentionRule for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateRetentionRule
func (c *Kcrs) CreateRetentionRule(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateRetentionRuleRequest(input)
	return out, req.Send()
}

// CreateRetentionRuleWithContext is the same as CreateRetentionRule with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRetentionRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) CreateRetentionRuleWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateRetentionRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateWebhookTrigger = "CreateWebhookTrigger"

// CreateWebhookTriggerRequest generates a "ksc/request.Request" representing the
// client's request for the CreateWebhookTrigger operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateWebhookTrigger for more information on using the CreateWebhookTrigger
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateWebhookTriggerRequest method.
//    req, resp := client.CreateWebhookTriggerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateWebhookTrigger
func (c *Kcrs) CreateWebhookTriggerRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateWebhookTrigger,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateWebhookTrigger API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation CreateWebhookTrigger for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/CreateWebhookTrigger
func (c *Kcrs) CreateWebhookTrigger(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateWebhookTriggerRequest(input)
	return out, req.Send()
}

// CreateWebhookTriggerWithContext is the same as CreateWebhookTrigger with the addition of
// the ability to pass a context and additional request options.
//
// See CreateWebhookTrigger for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) CreateWebhookTriggerWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateWebhookTriggerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteExternalEndpointPolicy = "DeleteExternalEndpointPolicy"

// DeleteExternalEndpointPolicyRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteExternalEndpointPolicy operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteExternalEndpointPolicy for more information on using the DeleteExternalEndpointPolicy
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteExternalEndpointPolicyRequest method.
//    req, resp := client.DeleteExternalEndpointPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteExternalEndpointPolicy
func (c *Kcrs) DeleteExternalEndpointPolicyRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteExternalEndpointPolicy,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteExternalEndpointPolicy API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteExternalEndpointPolicy for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteExternalEndpointPolicy
func (c *Kcrs) DeleteExternalEndpointPolicy(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteExternalEndpointPolicyRequest(input)
	return out, req.Send()
}

// DeleteExternalEndpointPolicyWithContext is the same as DeleteExternalEndpointPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteExternalEndpointPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteExternalEndpointPolicyWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteExternalEndpointPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteImages = "DeleteImages"

// DeleteImagesRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteImages operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteImages for more information on using the DeleteImages
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteImagesRequest method.
//    req, resp := client.DeleteImagesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteImages
func (c *Kcrs) DeleteImagesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteImages,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteImages API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteImages for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteImages
func (c *Kcrs) DeleteImages(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteImagesRequest(input)
	return out, req.Send()
}

// DeleteImagesWithContext is the same as DeleteImages with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteImages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteImagesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteImagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstance = "DeleteInstance"

// DeleteInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInstance for more information on using the DeleteInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInstanceRequest method.
//    req, resp := client.DeleteInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteInstance
func (c *Kcrs) DeleteInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInstance API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteInstance
func (c *Kcrs) DeleteInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceRequest(input)
	return out, req.Send()
}

// DeleteInstanceWithContext is the same as DeleteInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstanceToken = "DeleteInstanceToken"

// DeleteInstanceTokenRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteInstanceToken operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInstanceToken for more information on using the DeleteInstanceToken
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInstanceTokenRequest method.
//    req, resp := client.DeleteInstanceTokenRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteInstanceToken
func (c *Kcrs) DeleteInstanceTokenRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteInstanceToken,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInstanceToken API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteInstanceToken for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteInstanceToken
func (c *Kcrs) DeleteInstanceToken(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceTokenRequest(input)
	return out, req.Send()
}

// DeleteInstanceTokenWithContext is the same as DeleteInstanceToken with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstanceToken for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteInstanceTokenWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceTokenRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInternalEndpoint = "DeleteInternalEndpoint"

// DeleteInternalEndpointRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteInternalEndpoint operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInternalEndpoint for more information on using the DeleteInternalEndpoint
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInternalEndpointRequest method.
//    req, resp := client.DeleteInternalEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteInternalEndpoint
func (c *Kcrs) DeleteInternalEndpointRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteInternalEndpoint,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInternalEndpoint API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteInternalEndpoint for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteInternalEndpoint
func (c *Kcrs) DeleteInternalEndpoint(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteInternalEndpointRequest(input)
	return out, req.Send()
}

// DeleteInternalEndpointWithContext is the same as DeleteInternalEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInternalEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteInternalEndpointWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteInternalEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInternalEndpointDns = "DeleteInternalEndpointDns"

// DeleteInternalEndpointDnsRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteInternalEndpointDns operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInternalEndpointDns for more information on using the DeleteInternalEndpointDns
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInternalEndpointDnsRequest method.
//    req, resp := client.DeleteInternalEndpointDnsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteInternalEndpointDns
func (c *Kcrs) DeleteInternalEndpointDnsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteInternalEndpointDns,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInternalEndpointDns API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteInternalEndpointDns for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteInternalEndpointDns
func (c *Kcrs) DeleteInternalEndpointDns(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteInternalEndpointDnsRequest(input)
	return out, req.Send()
}

// DeleteInternalEndpointDnsWithContext is the same as DeleteInternalEndpointDns with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInternalEndpointDns for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteInternalEndpointDnsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteInternalEndpointDnsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNamespace = "DeleteNamespace"

// DeleteNamespaceRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteNamespace operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteNamespace for more information on using the DeleteNamespace
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteNamespaceRequest method.
//    req, resp := client.DeleteNamespaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteNamespace
func (c *Kcrs) DeleteNamespaceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNamespace,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteNamespace API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteNamespace for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteNamespace
func (c *Kcrs) DeleteNamespace(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNamespaceRequest(input)
	return out, req.Send()
}

// DeleteNamespaceWithContext is the same as DeleteNamespace with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNamespace for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteNamespaceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNamespaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRepoTag = "DeleteRepoTag"

// DeleteRepoTagRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteRepoTag operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteRepoTag for more information on using the DeleteRepoTag
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteRepoTagRequest method.
//    req, resp := client.DeleteRepoTagRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteRepoTag
func (c *Kcrs) DeleteRepoTagRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteRepoTag,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRepoTag API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteRepoTag for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteRepoTag
func (c *Kcrs) DeleteRepoTag(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteRepoTagRequest(input)
	return out, req.Send()
}

// DeleteRepoTagWithContext is the same as DeleteRepoTag with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRepoTag for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteRepoTagWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteRepoTagRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRepository = "DeleteRepository"

// DeleteRepositoryRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteRepository operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteRepository for more information on using the DeleteRepository
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteRepositoryRequest method.
//    req, resp := client.DeleteRepositoryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteRepository
func (c *Kcrs) DeleteRepositoryRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteRepository,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRepository API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteRepository for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteRepository
func (c *Kcrs) DeleteRepository(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteRepositoryRequest(input)
	return out, req.Send()
}

// DeleteRepositoryWithContext is the same as DeleteRepository with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRepository for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteRepositoryWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteRepositoryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRetentionRule = "DeleteRetentionRule"

// DeleteRetentionRuleRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteRetentionRule operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteRetentionRule for more information on using the DeleteRetentionRule
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteRetentionRuleRequest method.
//    req, resp := client.DeleteRetentionRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteRetentionRule
func (c *Kcrs) DeleteRetentionRuleRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteRetentionRule,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRetentionRule API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteRetentionRule for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteRetentionRule
func (c *Kcrs) DeleteRetentionRule(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteRetentionRuleRequest(input)
	return out, req.Send()
}

// DeleteRetentionRuleWithContext is the same as DeleteRetentionRule with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRetentionRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteRetentionRuleWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteRetentionRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteWebhookTrigger = "DeleteWebhookTrigger"

// DeleteWebhookTriggerRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteWebhookTrigger operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteWebhookTrigger for more information on using the DeleteWebhookTrigger
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteWebhookTriggerRequest method.
//    req, resp := client.DeleteWebhookTriggerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteWebhookTrigger
func (c *Kcrs) DeleteWebhookTriggerRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteWebhookTrigger,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteWebhookTrigger API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DeleteWebhookTrigger for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DeleteWebhookTrigger
func (c *Kcrs) DeleteWebhookTrigger(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteWebhookTriggerRequest(input)
	return out, req.Send()
}

// DeleteWebhookTriggerWithContext is the same as DeleteWebhookTrigger with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteWebhookTrigger for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DeleteWebhookTriggerWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteWebhookTriggerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeExternalEndpoint = "DescribeExternalEndpoint"

// DescribeExternalEndpointRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeExternalEndpoint operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeExternalEndpoint for more information on using the DescribeExternalEndpoint
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeExternalEndpointRequest method.
//    req, resp := client.DescribeExternalEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeExternalEndpoint
func (c *Kcrs) DescribeExternalEndpointRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeExternalEndpoint,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeExternalEndpoint API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeExternalEndpoint for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeExternalEndpoint
func (c *Kcrs) DescribeExternalEndpoint(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeExternalEndpointRequest(input)
	return out, req.Send()
}

// DescribeExternalEndpointWithContext is the same as DescribeExternalEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeExternalEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeExternalEndpointWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeExternalEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeImageScan = "DescribeImageScan"

// DescribeImageScanRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeImageScan operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeImageScan for more information on using the DescribeImageScan
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeImageScanRequest method.
//    req, resp := client.DescribeImageScanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeImageScan
func (c *Kcrs) DescribeImageScanRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeImageScan,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeImageScan API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeImageScan for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeImageScan
func (c *Kcrs) DescribeImageScan(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeImageScanRequest(input)
	return out, req.Send()
}

// DescribeImageScanWithContext is the same as DescribeImageScan with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeImageScan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeImageScanWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeImageScanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeImages = "DescribeImages"

// DescribeImagesRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeImages operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeImages for more information on using the DescribeImages
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeImagesRequest method.
//    req, resp := client.DescribeImagesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeImages
func (c *Kcrs) DescribeImagesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeImages,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeImages API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeImages for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeImages
func (c *Kcrs) DescribeImages(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeImagesRequest(input)
	return out, req.Send()
}

// DescribeImagesWithContext is the same as DescribeImages with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeImages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeImagesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeImagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstance = "DescribeInstance"

// DescribeInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstance for more information on using the DescribeInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceRequest method.
//    req, resp := client.DescribeInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInstance
func (c *Kcrs) DescribeInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstance API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInstance
func (c *Kcrs) DescribeInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceRequest(input)
	return out, req.Send()
}

// DescribeInstanceWithContext is the same as DescribeInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceToken = "DescribeInstanceToken"

// DescribeInstanceTokenRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeInstanceToken operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceToken for more information on using the DescribeInstanceToken
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceTokenRequest method.
//    req, resp := client.DescribeInstanceTokenRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInstanceToken
func (c *Kcrs) DescribeInstanceTokenRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceToken,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceToken API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeInstanceToken for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInstanceToken
func (c *Kcrs) DescribeInstanceToken(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceTokenRequest(input)
	return out, req.Send()
}

// DescribeInstanceTokenWithContext is the same as DescribeInstanceToken with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceToken for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeInstanceTokenWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceTokenRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceUsage = "DescribeInstanceUsage"

// DescribeInstanceUsageRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeInstanceUsage operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceUsage for more information on using the DescribeInstanceUsage
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceUsageRequest method.
//    req, resp := client.DescribeInstanceUsageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInstanceUsage
func (c *Kcrs) DescribeInstanceUsageRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceUsage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceUsage API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeInstanceUsage for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInstanceUsage
func (c *Kcrs) DescribeInstanceUsage(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceUsageRequest(input)
	return out, req.Send()
}

// DescribeInstanceUsageWithContext is the same as DescribeInstanceUsage with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceUsage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeInstanceUsageWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceUsageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInternalEndpoint = "DescribeInternalEndpoint"

// DescribeInternalEndpointRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeInternalEndpoint operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInternalEndpoint for more information on using the DescribeInternalEndpoint
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInternalEndpointRequest method.
//    req, resp := client.DescribeInternalEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInternalEndpoint
func (c *Kcrs) DescribeInternalEndpointRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInternalEndpoint,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInternalEndpoint API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeInternalEndpoint for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInternalEndpoint
func (c *Kcrs) DescribeInternalEndpoint(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInternalEndpointRequest(input)
	return out, req.Send()
}

// DescribeInternalEndpointWithContext is the same as DescribeInternalEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInternalEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeInternalEndpointWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInternalEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInternalEndpointDns = "DescribeInternalEndpointDns"

// DescribeInternalEndpointDnsRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeInternalEndpointDns operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInternalEndpointDns for more information on using the DescribeInternalEndpointDns
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInternalEndpointDnsRequest method.
//    req, resp := client.DescribeInternalEndpointDnsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInternalEndpointDns
func (c *Kcrs) DescribeInternalEndpointDnsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInternalEndpointDns,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInternalEndpointDns API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeInternalEndpointDns for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeInternalEndpointDns
func (c *Kcrs) DescribeInternalEndpointDns(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInternalEndpointDnsRequest(input)
	return out, req.Send()
}

// DescribeInternalEndpointDnsWithContext is the same as DescribeInternalEndpointDns with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInternalEndpointDns for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeInternalEndpointDnsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInternalEndpointDnsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNamespace = "DescribeNamespace"

// DescribeNamespaceRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeNamespace operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeNamespace for more information on using the DescribeNamespace
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeNamespaceRequest method.
//    req, resp := client.DescribeNamespaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeNamespace
func (c *Kcrs) DescribeNamespaceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeNamespace,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeNamespace API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeNamespace for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeNamespace
func (c *Kcrs) DescribeNamespace(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeNamespaceRequest(input)
	return out, req.Send()
}

// DescribeNamespaceWithContext is the same as DescribeNamespace with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNamespace for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeNamespaceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeNamespaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRepository = "DescribeRepository"

// DescribeRepositoryRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeRepository operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeRepository for more information on using the DescribeRepository
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeRepositoryRequest method.
//    req, resp := client.DescribeRepositoryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeRepository
func (c *Kcrs) DescribeRepositoryRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeRepository,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeRepository API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeRepository for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeRepository
func (c *Kcrs) DescribeRepository(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeRepositoryRequest(input)
	return out, req.Send()
}

// DescribeRepositoryWithContext is the same as DescribeRepository with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRepository for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeRepositoryWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeRepositoryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRetentionRule = "DescribeRetentionRule"

// DescribeRetentionRuleRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeRetentionRule operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeRetentionRule for more information on using the DescribeRetentionRule
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeRetentionRuleRequest method.
//    req, resp := client.DescribeRetentionRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeRetentionRule
func (c *Kcrs) DescribeRetentionRuleRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeRetentionRule,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeRetentionRule API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeRetentionRule for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeRetentionRule
func (c *Kcrs) DescribeRetentionRule(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeRetentionRuleRequest(input)
	return out, req.Send()
}

// DescribeRetentionRuleWithContext is the same as DescribeRetentionRule with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRetentionRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeRetentionRuleWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeRetentionRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeWebhookTrigger = "DescribeWebhookTrigger"

// DescribeWebhookTriggerRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeWebhookTrigger operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeWebhookTrigger for more information on using the DescribeWebhookTrigger
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeWebhookTriggerRequest method.
//    req, resp := client.DescribeWebhookTriggerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeWebhookTrigger
func (c *Kcrs) DescribeWebhookTriggerRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeWebhookTrigger,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeWebhookTrigger API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation DescribeWebhookTrigger for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/DescribeWebhookTrigger
func (c *Kcrs) DescribeWebhookTrigger(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeWebhookTriggerRequest(input)
	return out, req.Send()
}

// DescribeWebhookTriggerWithContext is the same as DescribeWebhookTrigger with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeWebhookTrigger for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) DescribeWebhookTriggerWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeWebhookTriggerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceTokenInformation = "ModifyInstanceTokenInformation"

// ModifyInstanceTokenInformationRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyInstanceTokenInformation operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceTokenInformation for more information on using the ModifyInstanceTokenInformation
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceTokenInformationRequest method.
//    req, resp := client.ModifyInstanceTokenInformationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyInstanceTokenInformation
func (c *Kcrs) ModifyInstanceTokenInformationRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceTokenInformation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceTokenInformation API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation ModifyInstanceTokenInformation for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyInstanceTokenInformation
func (c *Kcrs) ModifyInstanceTokenInformation(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceTokenInformationRequest(input)
	return out, req.Send()
}

// ModifyInstanceTokenInformationWithContext is the same as ModifyInstanceTokenInformation with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceTokenInformation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) ModifyInstanceTokenInformationWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceTokenInformationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceTokenStatus = "ModifyInstanceTokenStatus"

// ModifyInstanceTokenStatusRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyInstanceTokenStatus operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceTokenStatus for more information on using the ModifyInstanceTokenStatus
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceTokenStatusRequest method.
//    req, resp := client.ModifyInstanceTokenStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyInstanceTokenStatus
func (c *Kcrs) ModifyInstanceTokenStatusRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceTokenStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceTokenStatus API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation ModifyInstanceTokenStatus for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyInstanceTokenStatus
func (c *Kcrs) ModifyInstanceTokenStatus(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceTokenStatusRequest(input)
	return out, req.Send()
}

// ModifyInstanceTokenStatusWithContext is the same as ModifyInstanceTokenStatus with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceTokenStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) ModifyInstanceTokenStatusWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceTokenStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyNamespaceType = "ModifyNamespaceType"

// ModifyNamespaceTypeRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyNamespaceType operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyNamespaceType for more information on using the ModifyNamespaceType
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyNamespaceTypeRequest method.
//    req, resp := client.ModifyNamespaceTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyNamespaceType
func (c *Kcrs) ModifyNamespaceTypeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyNamespaceType,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyNamespaceType API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation ModifyNamespaceType for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyNamespaceType
func (c *Kcrs) ModifyNamespaceType(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyNamespaceTypeRequest(input)
	return out, req.Send()
}

// ModifyNamespaceTypeWithContext is the same as ModifyNamespaceType with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyNamespaceType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) ModifyNamespaceTypeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyNamespaceTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyRepoDesc = "ModifyRepoDesc"

// ModifyRepoDescRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyRepoDesc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyRepoDesc for more information on using the ModifyRepoDesc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyRepoDescRequest method.
//    req, resp := client.ModifyRepoDescRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyRepoDesc
func (c *Kcrs) ModifyRepoDescRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyRepoDesc,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyRepoDesc API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation ModifyRepoDesc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyRepoDesc
func (c *Kcrs) ModifyRepoDesc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyRepoDescRequest(input)
	return out, req.Send()
}

// ModifyRepoDescWithContext is the same as ModifyRepoDesc with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyRepoDesc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) ModifyRepoDescWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyRepoDescRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyWebhookTrigger = "ModifyWebhookTrigger"

// ModifyWebhookTriggerRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyWebhookTrigger operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyWebhookTrigger for more information on using the ModifyWebhookTrigger
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyWebhookTriggerRequest method.
//    req, resp := client.ModifyWebhookTriggerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyWebhookTrigger
func (c *Kcrs) ModifyWebhookTriggerRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyWebhookTrigger,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyWebhookTrigger API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation ModifyWebhookTrigger for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/ModifyWebhookTrigger
func (c *Kcrs) ModifyWebhookTrigger(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyWebhookTriggerRequest(input)
	return out, req.Send()
}

// ModifyWebhookTriggerWithContext is the same as ModifyWebhookTrigger with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyWebhookTrigger for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) ModifyWebhookTriggerWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyWebhookTriggerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opOpenExternalEndpoint = "OpenExternalEndpoint"

// OpenExternalEndpointRequest generates a "ksc/request.Request" representing the
// client's request for the OpenExternalEndpoint operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See OpenExternalEndpoint for more information on using the OpenExternalEndpoint
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the OpenExternalEndpointRequest method.
//    req, resp := client.OpenExternalEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/OpenExternalEndpoint
func (c *Kcrs) OpenExternalEndpointRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opOpenExternalEndpoint,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// OpenExternalEndpoint API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation OpenExternalEndpoint for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/OpenExternalEndpoint
func (c *Kcrs) OpenExternalEndpoint(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.OpenExternalEndpointRequest(input)
	return out, req.Send()
}

// OpenExternalEndpointWithContext is the same as OpenExternalEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See OpenExternalEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) OpenExternalEndpointWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.OpenExternalEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunRetentionPolicy = "RunRetentionPolicy"

// RunRetentionPolicyRequest generates a "ksc/request.Request" representing the
// client's request for the RunRetentionPolicy operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RunRetentionPolicy for more information on using the RunRetentionPolicy
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RunRetentionPolicyRequest method.
//    req, resp := client.RunRetentionPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/RunRetentionPolicy
func (c *Kcrs) RunRetentionPolicyRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRunRetentionPolicy,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RunRetentionPolicy API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation RunRetentionPolicy for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/RunRetentionPolicy
func (c *Kcrs) RunRetentionPolicy(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RunRetentionPolicyRequest(input)
	return out, req.Send()
}

// RunRetentionPolicyWithContext is the same as RunRetentionPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See RunRetentionPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) RunRetentionPolicyWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RunRetentionPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartImageScan = "StartImageScan"

// StartImageScanRequest generates a "ksc/request.Request" representing the
// client's request for the StartImageScan operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StartImageScan for more information on using the StartImageScan
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StartImageScanRequest method.
//    req, resp := client.StartImageScanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/StartImageScan
func (c *Kcrs) StartImageScanRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStartImageScan,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StartImageScan API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation StartImageScan for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/StartImageScan
func (c *Kcrs) StartImageScan(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StartImageScanRequest(input)
	return out, req.Send()
}

// StartImageScanWithContext is the same as StartImageScan with the addition of
// the ability to pass a context and additional request options.
//
// See StartImageScan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) StartImageScanWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StartImageScanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateExternalEndpointPolicy = "UpdateExternalEndpointPolicy"

// UpdateExternalEndpointPolicyRequest generates a "ksc/request.Request" representing the
// client's request for the UpdateExternalEndpointPolicy operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See UpdateExternalEndpointPolicy for more information on using the UpdateExternalEndpointPolicy
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the UpdateExternalEndpointPolicyRequest method.
//    req, resp := client.UpdateExternalEndpointPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/UpdateExternalEndpointPolicy
func (c *Kcrs) UpdateExternalEndpointPolicyRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateExternalEndpointPolicy,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateExternalEndpointPolicy API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation UpdateExternalEndpointPolicy for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/UpdateExternalEndpointPolicy
func (c *Kcrs) UpdateExternalEndpointPolicy(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateExternalEndpointPolicyRequest(input)
	return out, req.Send()
}

// UpdateExternalEndpointPolicyWithContext is the same as UpdateExternalEndpointPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateExternalEndpointPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) UpdateExternalEndpointPolicyWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateExternalEndpointPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateRetentionRule = "UpdateRetentionRule"

// UpdateRetentionRuleRequest generates a "ksc/request.Request" representing the
// client's request for the UpdateRetentionRule operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See UpdateRetentionRule for more information on using the UpdateRetentionRule
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the UpdateRetentionRuleRequest method.
//    req, resp := client.UpdateRetentionRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/UpdateRetentionRule
func (c *Kcrs) UpdateRetentionRuleRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateRetentionRule,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateRetentionRule API operation for kcrs.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kcrs's
// API operation UpdateRetentionRule for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kcrs-2021-11-09/UpdateRetentionRule
func (c *Kcrs) UpdateRetentionRule(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateRetentionRuleRequest(input)
	return out, req.Send()
}

// UpdateRetentionRuleWithContext is the same as UpdateRetentionRule with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRetentionRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kcrs) UpdateRetentionRuleWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateRetentionRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

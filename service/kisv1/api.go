// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kisv1

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opGetBandwidth = "getBandwidth"

// GetBandwidthRequest generates a "ksc/request.Request" representing the
// client's request for the GetBandwidth operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetBandwidth for more information on using the GetBandwidth
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetBandwidthRequest method.
//    req, resp := client.GetBandwidthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetBandwidth
func (c *Kisv1) GetBandwidthRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetBandwidth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetBandwidth API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation GetBandwidth for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetBandwidth
func (c *Kisv1) GetBandwidth(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetBandwidthRequest(input)
	return out, req.Send()
}

// GetBandwidthWithContext is the same as GetBandwidth with the addition of
// the ability to pass a context and additional request options.
//
// See GetBandwidth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) GetBandwidthWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetBandwidthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetCabinet = "getCabinet"

// GetCabinetRequest generates a "ksc/request.Request" representing the
// client's request for the GetCabinet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetCabinet for more information on using the GetCabinet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetCabinetRequest method.
//    req, resp := client.GetCabinetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetCabinet
func (c *Kisv1) GetCabinetRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetCabinet,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetCabinet API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation GetCabinet for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetCabinet
func (c *Kisv1) GetCabinet(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetCabinetRequest(input)
	return out, req.Send()
}

// GetCabinetWithContext is the same as GetCabinet with the addition of
// the ability to pass a context and additional request options.
//
// See GetCabinet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) GetCabinetWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetCabinetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetDevice = "getDevice"

// GetDeviceRequest generates a "ksc/request.Request" representing the
// client's request for the GetDevice operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetDevice for more information on using the GetDevice
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetDeviceRequest method.
//    req, resp := client.GetDeviceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetDevice
func (c *Kisv1) GetDeviceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetDevice,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDevice API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation GetDevice for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetDevice
func (c *Kisv1) GetDevice(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetDeviceRequest(input)
	return out, req.Send()
}

// GetDeviceWithContext is the same as GetDevice with the addition of
// the ability to pass a context and additional request options.
//
// See GetDevice for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) GetDeviceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetDeviceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetDp = "getDp"

// GetDpRequest generates a "ksc/request.Request" representing the
// client's request for the GetDp operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetDp for more information on using the GetDp
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetDpRequest method.
//    req, resp := client.GetDpRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetDp
func (c *Kisv1) GetDpRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetDp,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDp API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation GetDp for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetDp
func (c *Kisv1) GetDp(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetDpRequest(input)
	return out, req.Send()
}

// GetDpWithContext is the same as GetDp with the addition of
// the ability to pass a context and additional request options.
//
// See GetDp for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) GetDpWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetDpRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetInternetPort = "getInternetPort"

// GetInternetPortRequest generates a "ksc/request.Request" representing the
// client's request for the GetInternetPort operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetInternetPort for more information on using the GetInternetPort
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetInternetPortRequest method.
//    req, resp := client.GetInternetPortRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetInternetPort
func (c *Kisv1) GetInternetPortRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetInternetPort,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetInternetPort API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation GetInternetPort for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetInternetPort
func (c *Kisv1) GetInternetPort(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetInternetPortRequest(input)
	return out, req.Send()
}

// GetInternetPortWithContext is the same as GetInternetPort with the addition of
// the ability to pass a context and additional request options.
//
// See GetInternetPort for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) GetInternetPortWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetInternetPortRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetIpaddrData = "getIpaddrData"

// GetIpaddrDataRequest generates a "ksc/request.Request" representing the
// client's request for the GetIpaddrData operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetIpaddrData for more information on using the GetIpaddrData
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetIpaddrDataRequest method.
//    req, resp := client.GetIpaddrDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetIpaddrData
func (c *Kisv1) GetIpaddrDataRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetIpaddrData,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetIpaddrData API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation GetIpaddrData for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetIpaddrData
func (c *Kisv1) GetIpaddrData(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetIpaddrDataRequest(input)
	return out, req.Send()
}

// GetIpaddrDataWithContext is the same as GetIpaddrData with the addition of
// the ability to pass a context and additional request options.
//
// See GetIpaddrData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) GetIpaddrDataWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetIpaddrDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetMonitorData = "getMonitorData"

// GetMonitorDataRequest generates a "ksc/request.Request" representing the
// client's request for the GetMonitorData operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetMonitorData for more information on using the GetMonitorData
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetMonitorDataRequest method.
//    req, resp := client.GetMonitorDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetMonitorData
func (c *Kisv1) GetMonitorDataRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetMonitorData,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetMonitorData API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation GetMonitorData for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetMonitorData
func (c *Kisv1) GetMonitorData(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetMonitorDataRequest(input)
	return out, req.Send()
}

// GetMonitorDataWithContext is the same as GetMonitorData with the addition of
// the ability to pass a context and additional request options.
//
// See GetMonitorData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) GetMonitorDataWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetMonitorDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetSubnet = "getSubnet"

// GetSubnetRequest generates a "ksc/request.Request" representing the
// client's request for the GetSubnet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetSubnet for more information on using the GetSubnet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetSubnetRequest method.
//    req, resp := client.GetSubnetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetSubnet
func (c *Kisv1) GetSubnetRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetSubnet,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetSubnet API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation GetSubnet for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetSubnet
func (c *Kisv1) GetSubnet(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetSubnetRequest(input)
	return out, req.Send()
}

// GetSubnetWithContext is the same as GetSubnet with the addition of
// the ability to pass a context and additional request options.
//
// See GetSubnet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) GetSubnetWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetSubnetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetVpcAccess = "getVpcAccess"

// GetVpcAccessRequest generates a "ksc/request.Request" representing the
// client's request for the GetVpcAccess operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetVpcAccess for more information on using the GetVpcAccess
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetVpcAccessRequest method.
//    req, resp := client.GetVpcAccessRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetVpcAccess
func (c *Kisv1) GetVpcAccessRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetVpcAccess,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetVpcAccess API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation GetVpcAccess for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/GetVpcAccess
func (c *Kisv1) GetVpcAccess(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetVpcAccessRequest(input)
	return out, req.Send()
}

// GetVpcAccessWithContext is the same as GetVpcAccess with the addition of
// the ability to pass a context and additional request options.
//
// See GetVpcAccess for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) GetVpcAccessWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetVpcAccessRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDeviceProductType = "listDeviceProductType"

// ListDeviceProductTypeRequest generates a "ksc/request.Request" representing the
// client's request for the ListDeviceProductType operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListDeviceProductType for more information on using the ListDeviceProductType
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListDeviceProductTypeRequest method.
//    req, resp := client.ListDeviceProductTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListDeviceProductType
func (c *Kisv1) ListDeviceProductTypeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDeviceProductType,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListDeviceProductType API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation ListDeviceProductType for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListDeviceProductType
func (c *Kisv1) ListDeviceProductType(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDeviceProductTypeRequest(input)
	return out, req.Send()
}

// ListDeviceProductTypeWithContext is the same as ListDeviceProductType with the addition of
// the ability to pass a context and additional request options.
//
// See ListDeviceProductType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) ListDeviceProductTypeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDeviceProductTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDpAddress = "listDpAddress"

// ListDpAddressRequest generates a "ksc/request.Request" representing the
// client's request for the ListDpAddress operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListDpAddress for more information on using the ListDpAddress
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListDpAddressRequest method.
//    req, resp := client.ListDpAddressRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListDpAddress
func (c *Kisv1) ListDpAddressRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDpAddress,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListDpAddress API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation ListDpAddress for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListDpAddress
func (c *Kisv1) ListDpAddress(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDpAddressRequest(input)
	return out, req.Send()
}

// ListDpAddressWithContext is the same as ListDpAddress with the addition of
// the ability to pass a context and additional request options.
//
// See ListDpAddress for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) ListDpAddressWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDpAddressRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDpClassify = "listDpClassify"

// ListDpClassifyRequest generates a "ksc/request.Request" representing the
// client's request for the ListDpClassify operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListDpClassify for more information on using the ListDpClassify
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListDpClassifyRequest method.
//    req, resp := client.ListDpClassifyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListDpClassify
func (c *Kisv1) ListDpClassifyRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDpClassify,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListDpClassify API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation ListDpClassify for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListDpClassify
func (c *Kisv1) ListDpClassify(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDpClassifyRequest(input)
	return out, req.Send()
}

// ListDpClassifyWithContext is the same as ListDpClassify with the addition of
// the ability to pass a context and additional request options.
//
// See ListDpClassify for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) ListDpClassifyWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDpClassifyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListIdc = "listIdc"

// ListIdcRequest generates a "ksc/request.Request" representing the
// client's request for the ListIdc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListIdc for more information on using the ListIdc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListIdcRequest method.
//    req, resp := client.ListIdcRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListIdc
func (c *Kisv1) ListIdcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListIdc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListIdc API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation ListIdc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListIdc
func (c *Kisv1) ListIdc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListIdcRequest(input)
	return out, req.Send()
}

// ListIdcWithContext is the same as ListIdc with the addition of
// the ability to pass a context and additional request options.
//
// See ListIdc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) ListIdcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListIdcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListIsp = "listIsp"

// ListIspRequest generates a "ksc/request.Request" representing the
// client's request for the ListIsp operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListIsp for more information on using the ListIsp
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListIspRequest method.
//    req, resp := client.ListIspRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListIsp
func (c *Kisv1) ListIspRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListIsp,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListIsp API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation ListIsp for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListIsp
func (c *Kisv1) ListIsp(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListIspRequest(input)
	return out, req.Send()
}

// ListIspWithContext is the same as ListIsp with the addition of
// the ability to pass a context and additional request options.
//
// See ListIsp for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) ListIspWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListIspRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListMonitorProductType = "listMonitorProductType"

// ListMonitorProductTypeRequest generates a "ksc/request.Request" representing the
// client's request for the ListMonitorProductType operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListMonitorProductType for more information on using the ListMonitorProductType
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListMonitorProductTypeRequest method.
//    req, resp := client.ListMonitorProductTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListMonitorProductType
func (c *Kisv1) ListMonitorProductTypeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListMonitorProductType,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListMonitorProductType API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation ListMonitorProductType for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListMonitorProductType
func (c *Kisv1) ListMonitorProductType(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListMonitorProductTypeRequest(input)
	return out, req.Send()
}

// ListMonitorProductTypeWithContext is the same as ListMonitorProductType with the addition of
// the ability to pass a context and additional request options.
//
// See ListMonitorProductType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) ListMonitorProductTypeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListMonitorProductTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRegion = "listRegion"

// ListRegionRequest generates a "ksc/request.Request" representing the
// client's request for the ListRegion operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListRegion for more information on using the ListRegion
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListRegionRequest method.
//    req, resp := client.ListRegionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListRegion
func (c *Kisv1) ListRegionRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRegion,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListRegion API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation ListRegion for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListRegion
func (c *Kisv1) ListRegion(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRegionRequest(input)
	return out, req.Send()
}

// ListRegionWithContext is the same as ListRegion with the addition of
// the ability to pass a context and additional request options.
//
// See ListRegion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) ListRegionWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRegionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListStep = "listStep"

// ListStepRequest generates a "ksc/request.Request" representing the
// client's request for the ListStep operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListStep for more information on using the ListStep
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListStepRequest method.
//    req, resp := client.ListStepRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListStep
func (c *Kisv1) ListStepRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListStep,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListStep API operation for kisv1.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kisv1's
// API operation ListStep for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2018-09-01/ListStep
func (c *Kisv1) ListStep(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListStepRequest(input)
	return out, req.Send()
}

// ListStepWithContext is the same as ListStep with the addition of
// the ability to pass a context and additional request options.
//
// See ListStep for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kisv1) ListStepWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListStepRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

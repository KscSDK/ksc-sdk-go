// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package epc

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opActivateHotStandbyEpc = "ActivateHotStandbyEpc"

// ActivateHotStandbyEpcRequest generates a "ksc/request.Request" representing the
// client's request for the ActivateHotStandbyEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ActivateHotStandbyEpc for more information on using the ActivateHotStandbyEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ActivateHotStandbyEpcRequest method.
//	req, resp := client.ActivateHotStandbyEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ActivateHotStandbyEpc
func (c *Epc) ActivateHotStandbyEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opActivateHotStandbyEpc,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ActivateHotStandbyEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ActivateHotStandbyEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ActivateHotStandbyEpc
func (c *Epc) ActivateHotStandbyEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ActivateHotStandbyEpcRequest(input)
	return out, req.Send()
}

// ActivateHotStandbyEpcWithContext is the same as ActivateHotStandbyEpc with the addition of
// the ability to pass a context and additional request options.
//
// See ActivateHotStandbyEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ActivateHotStandbyEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ActivateHotStandbyEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAssociateCluster = "AssociateCluster"

// AssociateClusterRequest generates a "ksc/request.Request" representing the
// client's request for the AssociateCluster operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AssociateCluster for more information on using the AssociateCluster
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the AssociateClusterRequest method.
//	req, resp := client.AssociateClusterRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/AssociateCluster
func (c *Epc) AssociateClusterRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssociateCluster,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateCluster API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation AssociateCluster for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/AssociateCluster
func (c *Epc) AssociateCluster(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssociateClusterRequest(input)
	return out, req.Send()
}

// AssociateClusterWithContext is the same as AssociateCluster with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateCluster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) AssociateClusterWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssociateClusterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBuyAccessory = "BuyAccessory"

// BuyAccessoryRequest generates a "ksc/request.Request" representing the
// client's request for the BuyAccessory operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See BuyAccessory for more information on using the BuyAccessory
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the BuyAccessoryRequest method.
//	req, resp := client.BuyAccessoryRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/BuyAccessory
func (c *Epc) BuyAccessoryRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBuyAccessory,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// BuyAccessory API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation BuyAccessory for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/BuyAccessory
func (c *Epc) BuyAccessory(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BuyAccessoryRequest(input)
	return out, req.Send()
}

// BuyAccessoryWithContext is the same as BuyAccessory with the addition of
// the ability to pass a context and additional request options.
//
// See BuyAccessory for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) BuyAccessoryWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BuyAccessoryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateAccessory = "CreateAccessory"

// CreateAccessoryRequest generates a "ksc/request.Request" representing the
// client's request for the CreateAccessory operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateAccessory for more information on using the CreateAccessory
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the CreateAccessoryRequest method.
//	req, resp := client.CreateAccessoryRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateAccessory
func (c *Epc) CreateAccessoryRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateAccessory,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateAccessory API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation CreateAccessory for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateAccessory
func (c *Epc) CreateAccessory(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateAccessoryRequest(input)
	return out, req.Send()
}

// CreateAccessoryWithContext is the same as CreateAccessory with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAccessory for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) CreateAccessoryWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateAccessoryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateCabinet = "CreateCabinet"

// CreateCabinetRequest generates a "ksc/request.Request" representing the
// client's request for the CreateCabinet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateCabinet for more information on using the CreateCabinet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the CreateCabinetRequest method.
//	req, resp := client.CreateCabinetRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateCabinet
func (c *Epc) CreateCabinetRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateCabinet,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateCabinet API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation CreateCabinet for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateCabinet
func (c *Epc) CreateCabinet(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateCabinetRequest(input)
	return out, req.Send()
}

// CreateCabinetWithContext is the same as CreateCabinet with the addition of
// the ability to pass a context and additional request options.
//
// See CreateCabinet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) CreateCabinetWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateCabinetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateEpc = "CreateEpc"

// CreateEpcRequest generates a "ksc/request.Request" representing the
// client's request for the CreateEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateEpc for more information on using the CreateEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the CreateEpcRequest method.
//	req, resp := client.CreateEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateEpc
func (c *Epc) CreateEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateEpc,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation CreateEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateEpc
func (c *Epc) CreateEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateEpcRequest(input)
	return out, req.Send()
}

// CreateEpcWithContext is the same as CreateEpc with the addition of
// the ability to pass a context and additional request options.
//
// See CreateEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) CreateEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateImage = "CreateImage"

// CreateImageRequest generates a "ksc/request.Request" representing the
// client's request for the CreateImage operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateImage for more information on using the CreateImage
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the CreateImageRequest method.
//	req, resp := client.CreateImageRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateImage
func (c *Epc) CreateImageRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateImage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateImage API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation CreateImage for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateImage
func (c *Epc) CreateImage(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateImageRequest(input)
	return out, req.Send()
}

// CreateImageWithContext is the same as CreateImage with the addition of
// the ability to pass a context and additional request options.
//
// See CreateImage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) CreateImageWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateImageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateKey = "CreateKey"

// CreateKeyRequest generates a "ksc/request.Request" representing the
// client's request for the CreateKey operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateKey for more information on using the CreateKey
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the CreateKeyRequest method.
//	req, resp := client.CreateKeyRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateKey
func (c *Epc) CreateKeyRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateKey,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateKey API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation CreateKey for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateKey
func (c *Epc) CreateKey(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateKeyRequest(input)
	return out, req.Send()
}

// CreateKeyWithContext is the same as CreateKey with the addition of
// the ability to pass a context and additional request options.
//
// See CreateKey for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) CreateKeyWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateKeyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateProcess = "CreateProcess"

// CreateProcessRequest generates a "ksc/request.Request" representing the
// client's request for the CreateProcess operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateProcess for more information on using the CreateProcess
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the CreateProcessRequest method.
//	req, resp := client.CreateProcessRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateProcess
func (c *Epc) CreateProcessRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateProcess,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateProcess API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation CreateProcess for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateProcess
func (c *Epc) CreateProcess(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateProcessRequest(input)
	return out, req.Send()
}

// CreateProcessWithContext is the same as CreateProcess with the addition of
// the ability to pass a context and additional request options.
//
// See CreateProcess for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) CreateProcessWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateProcessRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateRemoteManagement = "CreateRemoteManagement"

// CreateRemoteManagementRequest generates a "ksc/request.Request" representing the
// client's request for the CreateRemoteManagement operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateRemoteManagement for more information on using the CreateRemoteManagement
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the CreateRemoteManagementRequest method.
//	req, resp := client.CreateRemoteManagementRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateRemoteManagement
func (c *Epc) CreateRemoteManagementRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateRemoteManagement,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateRemoteManagement API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation CreateRemoteManagement for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/CreateRemoteManagement
func (c *Epc) CreateRemoteManagement(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateRemoteManagementRequest(input)
	return out, req.Send()
}

// CreateRemoteManagementWithContext is the same as CreateRemoteManagement with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRemoteManagement for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) CreateRemoteManagementWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateRemoteManagementRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteAccessory = "DeleteAccessory"

// DeleteAccessoryRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteAccessory operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteAccessory for more information on using the DeleteAccessory
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DeleteAccessoryRequest method.
//	req, resp := client.DeleteAccessoryRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteAccessory
func (c *Epc) DeleteAccessoryRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteAccessory,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteAccessory API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DeleteAccessory for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteAccessory
func (c *Epc) DeleteAccessory(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteAccessoryRequest(input)
	return out, req.Send()
}

// DeleteAccessoryWithContext is the same as DeleteAccessory with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteAccessory for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DeleteAccessoryWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteAccessoryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteEpc = "DeleteEpc"

// DeleteEpcRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteEpc for more information on using the DeleteEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DeleteEpcRequest method.
//	req, resp := client.DeleteEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteEpc
func (c *Epc) DeleteEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteEpc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DeleteEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteEpc
func (c *Epc) DeleteEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteEpcRequest(input)
	return out, req.Send()
}

// DeleteEpcWithContext is the same as DeleteEpc with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DeleteEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteImage = "DeleteImage"

// DeleteImageRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteImage operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteImage for more information on using the DeleteImage
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DeleteImageRequest method.
//	req, resp := client.DeleteImageRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteImage
func (c *Epc) DeleteImageRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteImage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteImage API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DeleteImage for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteImage
func (c *Epc) DeleteImage(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteImageRequest(input)
	return out, req.Send()
}

// DeleteImageWithContext is the same as DeleteImage with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteImage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DeleteImageWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteImageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteKey = "DeleteKey"

// DeleteKeyRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteKey operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteKey for more information on using the DeleteKey
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DeleteKeyRequest method.
//	req, resp := client.DeleteKeyRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteKey
func (c *Epc) DeleteKeyRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteKey,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKey API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DeleteKey for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteKey
func (c *Epc) DeleteKey(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyRequest(input)
	return out, req.Send()
}

// DeleteKeyWithContext is the same as DeleteKey with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKey for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DeleteKeyWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteProcess = "DeleteProcess"

// DeleteProcessRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteProcess operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteProcess for more information on using the DeleteProcess
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DeleteProcessRequest method.
//	req, resp := client.DeleteProcessRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteProcess
func (c *Epc) DeleteProcessRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteProcess,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteProcess API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DeleteProcess for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteProcess
func (c *Epc) DeleteProcess(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteProcessRequest(input)
	return out, req.Send()
}

// DeleteProcessWithContext is the same as DeleteProcess with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteProcess for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DeleteProcessWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteProcessRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRemoteManagement = "DeleteRemoteManagement"

// DeleteRemoteManagementRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteRemoteManagement operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteRemoteManagement for more information on using the DeleteRemoteManagement
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DeleteRemoteManagementRequest method.
//	req, resp := client.DeleteRemoteManagementRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteRemoteManagement
func (c *Epc) DeleteRemoteManagementRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteRemoteManagement,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRemoteManagement API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DeleteRemoteManagement for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DeleteRemoteManagement
func (c *Epc) DeleteRemoteManagement(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteRemoteManagementRequest(input)
	return out, req.Send()
}

// DeleteRemoteManagementWithContext is the same as DeleteRemoteManagement with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRemoteManagement for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DeleteRemoteManagementWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteRemoteManagementRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAccessorys = "DescribeAccessorys"

// DescribeAccessorysRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeAccessorys operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeAccessorys for more information on using the DescribeAccessorys
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeAccessorysRequest method.
//	req, resp := client.DescribeAccessorysRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeAccessorys
func (c *Epc) DescribeAccessorysRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAccessorys,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAccessorys API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeAccessorys for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeAccessorys
func (c *Epc) DescribeAccessorys(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAccessorysRequest(input)
	return out, req.Send()
}

// DescribeAccessorysWithContext is the same as DescribeAccessorys with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAccessorys for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeAccessorysWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAccessorysRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCabinets = "DescribeCabinets"

// DescribeCabinetsRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeCabinets operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeCabinets for more information on using the DescribeCabinets
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeCabinetsRequest method.
//	req, resp := client.DescribeCabinetsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeCabinets
func (c *Epc) DescribeCabinetsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCabinets,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCabinets API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeCabinets for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeCabinets
func (c *Epc) DescribeCabinets(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCabinetsRequest(input)
	return out, req.Send()
}

// DescribeCabinetsWithContext is the same as DescribeCabinets with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCabinets for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeCabinetsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCabinetsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEpcDeviceAttributes = "DescribeEpcDeviceAttributes"

// DescribeEpcDeviceAttributesRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeEpcDeviceAttributes operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeEpcDeviceAttributes for more information on using the DescribeEpcDeviceAttributes
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeEpcDeviceAttributesRequest method.
//	req, resp := client.DescribeEpcDeviceAttributesRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcDeviceAttributes
func (c *Epc) DescribeEpcDeviceAttributesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeEpcDeviceAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeEpcDeviceAttributes API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeEpcDeviceAttributes for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcDeviceAttributes
func (c *Epc) DescribeEpcDeviceAttributes(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcDeviceAttributesRequest(input)
	return out, req.Send()
}

// DescribeEpcDeviceAttributesWithContext is the same as DescribeEpcDeviceAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEpcDeviceAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeEpcDeviceAttributesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcDeviceAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEpcManagements = "DescribeEpcManagements"

// DescribeEpcManagementsRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeEpcManagements operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeEpcManagements for more information on using the DescribeEpcManagements
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeEpcManagementsRequest method.
//	req, resp := client.DescribeEpcManagementsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcManagements
func (c *Epc) DescribeEpcManagementsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeEpcManagements,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeEpcManagements API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeEpcManagements for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcManagements
func (c *Epc) DescribeEpcManagements(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcManagementsRequest(input)
	return out, req.Send()
}

// DescribeEpcManagementsWithContext is the same as DescribeEpcManagements with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEpcManagements for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeEpcManagementsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcManagementsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEpcRaidAttributes = "DescribeEpcRaidAttributes"

// DescribeEpcRaidAttributesRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeEpcRaidAttributes operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeEpcRaidAttributes for more information on using the DescribeEpcRaidAttributes
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeEpcRaidAttributesRequest method.
//	req, resp := client.DescribeEpcRaidAttributesRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcRaidAttributes
func (c *Epc) DescribeEpcRaidAttributesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeEpcRaidAttributes,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeEpcRaidAttributes API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeEpcRaidAttributes for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcRaidAttributes
func (c *Epc) DescribeEpcRaidAttributes(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcRaidAttributesRequest(input)
	return out, req.Send()
}

// DescribeEpcRaidAttributesWithContext is the same as DescribeEpcRaidAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEpcRaidAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeEpcRaidAttributesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcRaidAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEpcStocks = "DescribeEpcStocks"

// DescribeEpcStocksRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeEpcStocks operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeEpcStocks for more information on using the DescribeEpcStocks
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeEpcStocksRequest method.
//	req, resp := client.DescribeEpcStocksRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcStocks
func (c *Epc) DescribeEpcStocksRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeEpcStocks,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeEpcStocks API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeEpcStocks for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcStocks
func (c *Epc) DescribeEpcStocks(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcStocksRequest(input)
	return out, req.Send()
}

// DescribeEpcStocksWithContext is the same as DescribeEpcStocks with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEpcStocks for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeEpcStocksWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcStocksRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEpcs = "DescribeEpcs"

// DescribeEpcsRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeEpcs operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeEpcs for more information on using the DescribeEpcs
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeEpcsRequest method.
//	req, resp := client.DescribeEpcsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcs
func (c *Epc) DescribeEpcsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeEpcs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeEpcs API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeEpcs for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeEpcs
func (c *Epc) DescribeEpcs(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcsRequest(input)
	return out, req.Send()
}

// DescribeEpcsWithContext is the same as DescribeEpcs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEpcs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeEpcsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeEpcsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeImages = "DescribeImages"

// DescribeImagesRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeImages operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeImages for more information on using the DescribeImages
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeImagesRequest method.
//	req, resp := client.DescribeImagesRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeImages
func (c *Epc) DescribeImagesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeImages,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeImages API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeImages for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeImages
func (c *Epc) DescribeImages(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeImagesRequest(input)
	return out, req.Send()
}

// DescribeImagesWithContext is the same as DescribeImages with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeImages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeImagesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeImagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInspections = "DescribeInspections"

// DescribeInspectionsRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeInspections operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInspections for more information on using the DescribeInspections
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeInspectionsRequest method.
//	req, resp := client.DescribeInspectionsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeInspections
func (c *Epc) DescribeInspectionsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInspections,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInspections API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeInspections for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeInspections
func (c *Epc) DescribeInspections(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInspectionsRequest(input)
	return out, req.Send()
}

// DescribeInspectionsWithContext is the same as DescribeInspections with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInspections for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeInspectionsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInspectionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeKeys = "DescribeKeys"

// DescribeKeysRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeKeys operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeKeys for more information on using the DescribeKeys
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeKeysRequest method.
//	req, resp := client.DescribeKeysRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeKeys
func (c *Epc) DescribeKeysRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeKeys,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeKeys API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeKeys for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeKeys
func (c *Epc) DescribeKeys(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeKeysRequest(input)
	return out, req.Send()
}

// DescribeKeysWithContext is the same as DescribeKeys with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeKeys for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeKeysWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeKeysRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribePhysicalMonitor = "DescribePhysicalMonitor"

// DescribePhysicalMonitorRequest generates a "ksc/request.Request" representing the
// client's request for the DescribePhysicalMonitor operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribePhysicalMonitor for more information on using the DescribePhysicalMonitor
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribePhysicalMonitorRequest method.
//	req, resp := client.DescribePhysicalMonitorRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribePhysicalMonitor
func (c *Epc) DescribePhysicalMonitorRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribePhysicalMonitor,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribePhysicalMonitor API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribePhysicalMonitor for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribePhysicalMonitor
func (c *Epc) DescribePhysicalMonitor(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribePhysicalMonitorRequest(input)
	return out, req.Send()
}

// DescribePhysicalMonitorWithContext is the same as DescribePhysicalMonitor with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePhysicalMonitor for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribePhysicalMonitorWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribePhysicalMonitorRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeProcesses = "DescribeProcesses"

// DescribeProcessesRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeProcesses operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeProcesses for more information on using the DescribeProcesses
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeProcessesRequest method.
//	req, resp := client.DescribeProcessesRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeProcesses
func (c *Epc) DescribeProcessesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeProcesses,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeProcesses API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeProcesses for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeProcesses
func (c *Epc) DescribeProcesses(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeProcessesRequest(input)
	return out, req.Send()
}

// DescribeProcessesWithContext is the same as DescribeProcesses with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeProcesses for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeProcessesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeProcessesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRemoteManagements = "DescribeRemoteManagements"

// DescribeRemoteManagementsRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeRemoteManagements operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeRemoteManagements for more information on using the DescribeRemoteManagements
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeRemoteManagementsRequest method.
//	req, resp := client.DescribeRemoteManagementsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeRemoteManagements
func (c *Epc) DescribeRemoteManagementsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeRemoteManagements,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeRemoteManagements API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeRemoteManagements for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeRemoteManagements
func (c *Epc) DescribeRemoteManagements(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeRemoteManagementsRequest(input)
	return out, req.Send()
}

// DescribeRemoteManagementsWithContext is the same as DescribeRemoteManagements with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRemoteManagements for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeRemoteManagementsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeRemoteManagementsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVpns = "DescribeVpns"

// DescribeVpnsRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeVpns operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeVpns for more information on using the DescribeVpns
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeVpnsRequest method.
//	req, resp := client.DescribeVpnsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeVpns
func (c *Epc) DescribeVpnsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeVpns,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeVpns API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DescribeVpns for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DescribeVpns
func (c *Epc) DescribeVpns(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeVpnsRequest(input)
	return out, req.Send()
}

// DescribeVpnsWithContext is the same as DescribeVpns with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVpns for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DescribeVpnsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeVpnsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisassociateCluster = "DisassociateCluster"

// DisassociateClusterRequest generates a "ksc/request.Request" representing the
// client's request for the DisassociateCluster operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DisassociateCluster for more information on using the DisassociateCluster
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DisassociateClusterRequest method.
//	req, resp := client.DisassociateClusterRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DisassociateCluster
func (c *Epc) DisassociateClusterRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDisassociateCluster,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DisassociateCluster API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation DisassociateCluster for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/DisassociateCluster
func (c *Epc) DisassociateCluster(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DisassociateClusterRequest(input)
	return out, req.Send()
}

// DisassociateClusterWithContext is the same as DisassociateCluster with the addition of
// the ability to pass a context and additional request options.
//
// See DisassociateCluster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) DisassociateClusterWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DisassociateClusterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetDynamicCode = "GetDynamicCode"

// GetDynamicCodeRequest generates a "ksc/request.Request" representing the
// client's request for the GetDynamicCode operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetDynamicCode for more information on using the GetDynamicCode
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the GetDynamicCodeRequest method.
//	req, resp := client.GetDynamicCodeRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/GetDynamicCode
func (c *Epc) GetDynamicCodeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetDynamicCode,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetDynamicCode API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation GetDynamicCode for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/GetDynamicCode
func (c *Epc) GetDynamicCode(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetDynamicCodeRequest(input)
	return out, req.Send()
}

// GetDynamicCodeWithContext is the same as GetDynamicCode with the addition of
// the ability to pass a context and additional request options.
//
// See GetDynamicCode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) GetDynamicCodeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetDynamicCodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opImportKey = "ImportKey"

// ImportKeyRequest generates a "ksc/request.Request" representing the
// client's request for the ImportKey operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ImportKey for more information on using the ImportKey
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ImportKeyRequest method.
//	req, resp := client.ImportKeyRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ImportKey
func (c *Epc) ImportKeyRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opImportKey,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ImportKey API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ImportKey for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ImportKey
func (c *Epc) ImportKey(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ImportKeyRequest(input)
	return out, req.Send()
}

// ImportKeyWithContext is the same as ImportKey with the addition of
// the ability to pass a context and additional request options.
//
// See ImportKey for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ImportKeyWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ImportKeyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDns = "ModifyDns"

// ModifyDnsRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyDns operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyDns for more information on using the ModifyDns
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifyDnsRequest method.
//	req, resp := client.ModifyDnsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyDns
func (c *Epc) ModifyDnsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDns,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyDns API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ModifyDns for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyDns
func (c *Epc) ModifyDns(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDnsRequest(input)
	return out, req.Send()
}

// ModifyDnsWithContext is the same as ModifyDns with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDns for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ModifyDnsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDnsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyEpc = "ModifyEpc"

// ModifyEpcRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyEpc for more information on using the ModifyEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifyEpcRequest method.
//	req, resp := client.ModifyEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyEpc
func (c *Epc) ModifyEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyEpc,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ModifyEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyEpc
func (c *Epc) ModifyEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyEpcRequest(input)
	return out, req.Send()
}

// ModifyEpcWithContext is the same as ModifyEpc with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ModifyEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyHyperThreading = "ModifyHyperThreading"

// ModifyHyperThreadingRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyHyperThreading operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyHyperThreading for more information on using the ModifyHyperThreading
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifyHyperThreadingRequest method.
//	req, resp := client.ModifyHyperThreadingRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyHyperThreading
func (c *Epc) ModifyHyperThreadingRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyHyperThreading,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyHyperThreading API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ModifyHyperThreading for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyHyperThreading
func (c *Epc) ModifyHyperThreading(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyHyperThreadingRequest(input)
	return out, req.Send()
}

// ModifyHyperThreadingWithContext is the same as ModifyHyperThreading with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyHyperThreading for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ModifyHyperThreadingWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyHyperThreadingRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyImage = "ModifyImage"

// ModifyImageRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyImage operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyImage for more information on using the ModifyImage
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifyImageRequest method.
//	req, resp := client.ModifyImageRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyImage
func (c *Epc) ModifyImageRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyImage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyImage API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ModifyImage for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyImage
func (c *Epc) ModifyImage(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyImageRequest(input)
	return out, req.Send()
}

// ModifyImageWithContext is the same as ModifyImage with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyImage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ModifyImageWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyImageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyKey = "ModifyKey"

// ModifyKeyRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyKey operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyKey for more information on using the ModifyKey
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifyKeyRequest method.
//	req, resp := client.ModifyKeyRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyKey
func (c *Epc) ModifyKeyRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyKey,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyKey API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ModifyKey for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyKey
func (c *Epc) ModifyKey(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyKeyRequest(input)
	return out, req.Send()
}

// ModifyKeyWithContext is the same as ModifyKey with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyKey for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ModifyKeyWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyKeyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyNetworkInterfaceAttribute = "ModifyNetworkInterfaceAttribute"

// ModifyNetworkInterfaceAttributeRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyNetworkInterfaceAttribute operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyNetworkInterfaceAttribute for more information on using the ModifyNetworkInterfaceAttribute
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifyNetworkInterfaceAttributeRequest method.
//	req, resp := client.ModifyNetworkInterfaceAttributeRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyNetworkInterfaceAttribute
func (c *Epc) ModifyNetworkInterfaceAttributeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyNetworkInterfaceAttribute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyNetworkInterfaceAttribute API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ModifyNetworkInterfaceAttribute for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyNetworkInterfaceAttribute
func (c *Epc) ModifyNetworkInterfaceAttribute(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyNetworkInterfaceAttributeRequest(input)
	return out, req.Send()
}

// ModifyNetworkInterfaceAttributeWithContext is the same as ModifyNetworkInterfaceAttribute with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyNetworkInterfaceAttribute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ModifyNetworkInterfaceAttributeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyNetworkInterfaceAttributeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyOverclockingAttribute = "ModifyOverclockingAttribute"

// ModifyOverclockingAttributeRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyOverclockingAttribute operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyOverclockingAttribute for more information on using the ModifyOverclockingAttribute
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifyOverclockingAttributeRequest method.
//	req, resp := client.ModifyOverclockingAttributeRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyOverclockingAttribute
func (c *Epc) ModifyOverclockingAttributeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyOverclockingAttribute,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyOverclockingAttribute API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ModifyOverclockingAttribute for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyOverclockingAttribute
func (c *Epc) ModifyOverclockingAttribute(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyOverclockingAttributeRequest(input)
	return out, req.Send()
}

// ModifyOverclockingAttributeWithContext is the same as ModifyOverclockingAttribute with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyOverclockingAttribute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ModifyOverclockingAttributeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyOverclockingAttributeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyRemoteManagement = "ModifyRemoteManagement"

// ModifyRemoteManagementRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyRemoteManagement operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyRemoteManagement for more information on using the ModifyRemoteManagement
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifyRemoteManagementRequest method.
//	req, resp := client.ModifyRemoteManagementRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyRemoteManagement
func (c *Epc) ModifyRemoteManagementRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyRemoteManagement,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyRemoteManagement API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ModifyRemoteManagement for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifyRemoteManagement
func (c *Epc) ModifyRemoteManagement(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyRemoteManagementRequest(input)
	return out, req.Send()
}

// ModifyRemoteManagementWithContext is the same as ModifyRemoteManagement with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyRemoteManagement for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ModifyRemoteManagementWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyRemoteManagementRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifySecurityGroup = "ModifySecurityGroup"

// ModifySecurityGroupRequest generates a "ksc/request.Request" representing the
// client's request for the ModifySecurityGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifySecurityGroup for more information on using the ModifySecurityGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifySecurityGroupRequest method.
//	req, resp := client.ModifySecurityGroupRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifySecurityGroup
func (c *Epc) ModifySecurityGroupRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifySecurityGroup,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifySecurityGroup API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ModifySecurityGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ModifySecurityGroup
func (c *Epc) ModifySecurityGroup(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifySecurityGroupRequest(input)
	return out, req.Send()
}

// ModifySecurityGroupWithContext is the same as ModifySecurityGroup with the addition of
// the ability to pass a context and additional request options.
//
// See ModifySecurityGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ModifySecurityGroupWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifySecurityGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootEpc = "RebootEpc"

// RebootEpcRequest generates a "ksc/request.Request" representing the
// client's request for the RebootEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RebootEpc for more information on using the RebootEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the RebootEpcRequest method.
//	req, resp := client.RebootEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/RebootEpc
func (c *Epc) RebootEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRebootEpc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RebootEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation RebootEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/RebootEpc
func (c *Epc) RebootEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RebootEpcRequest(input)
	return out, req.Send()
}

// RebootEpcWithContext is the same as RebootEpc with the addition of
// the ability to pass a context and additional request options.
//
// See RebootEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) RebootEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RebootEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReinstallCustomerEpc = "ReinstallCustomerEpc"

// ReinstallCustomerEpcRequest generates a "ksc/request.Request" representing the
// client's request for the ReinstallCustomerEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReinstallCustomerEpc for more information on using the ReinstallCustomerEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ReinstallCustomerEpcRequest method.
//	req, resp := client.ReinstallCustomerEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ReinstallCustomerEpc
func (c *Epc) ReinstallCustomerEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReinstallCustomerEpc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ReinstallCustomerEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ReinstallCustomerEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ReinstallCustomerEpc
func (c *Epc) ReinstallCustomerEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReinstallCustomerEpcRequest(input)
	return out, req.Send()
}

// ReinstallCustomerEpcWithContext is the same as ReinstallCustomerEpc with the addition of
// the ability to pass a context and additional request options.
//
// See ReinstallCustomerEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ReinstallCustomerEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReinstallCustomerEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReinstallEpc = "ReinstallEpc"

// ReinstallEpcRequest generates a "ksc/request.Request" representing the
// client's request for the ReinstallEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReinstallEpc for more information on using the ReinstallEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ReinstallEpcRequest method.
//	req, resp := client.ReinstallEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ReinstallEpc
func (c *Epc) ReinstallEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReinstallEpc,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ReinstallEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ReinstallEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ReinstallEpc
func (c *Epc) ReinstallEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReinstallEpcRequest(input)
	return out, req.Send()
}

// ReinstallEpcWithContext is the same as ReinstallEpc with the addition of
// the ability to pass a context and additional request options.
//
// See ReinstallEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ReinstallEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReinstallEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplyProcess = "ReplyProcess"

// ReplyProcessRequest generates a "ksc/request.Request" representing the
// client's request for the ReplyProcess operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReplyProcess for more information on using the ReplyProcess
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ReplyProcessRequest method.
//	req, resp := client.ReplyProcessRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ReplyProcess
func (c *Epc) ReplyProcessRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReplyProcess,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ReplyProcess API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ReplyProcess for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ReplyProcess
func (c *Epc) ReplyProcess(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReplyProcessRequest(input)
	return out, req.Send()
}

// ReplyProcessWithContext is the same as ReplyProcess with the addition of
// the ability to pass a context and additional request options.
//
// See ReplyProcess for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ReplyProcessWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReplyProcessRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetPassword = "ResetPassword"

// ResetPasswordRequest generates a "ksc/request.Request" representing the
// client's request for the ResetPassword operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResetPassword for more information on using the ResetPassword
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ResetPasswordRequest method.
//	req, resp := client.ResetPasswordRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ResetPassword
func (c *Epc) ResetPasswordRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetPassword,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ResetPassword API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation ResetPassword for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/ResetPassword
func (c *Epc) ResetPassword(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetPasswordRequest(input)
	return out, req.Send()
}

// ResetPasswordWithContext is the same as ResetPassword with the addition of
// the ability to pass a context and additional request options.
//
// See ResetPassword for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) ResetPasswordWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetPasswordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartEpc = "StartEpc"

// StartEpcRequest generates a "ksc/request.Request" representing the
// client's request for the StartEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StartEpc for more information on using the StartEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the StartEpcRequest method.
//	req, resp := client.StartEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/StartEpc
func (c *Epc) StartEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStartEpc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StartEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation StartEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/StartEpc
func (c *Epc) StartEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StartEpcRequest(input)
	return out, req.Send()
}

// StartEpcWithContext is the same as StartEpc with the addition of
// the ability to pass a context and additional request options.
//
// See StartEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) StartEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StartEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopEpc = "StopEpc"

// StopEpcRequest generates a "ksc/request.Request" representing the
// client's request for the StopEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StopEpc for more information on using the StopEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the StopEpcRequest method.
//	req, resp := client.StopEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/StopEpc
func (c *Epc) StopEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopEpc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StopEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation StopEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/StopEpc
func (c *Epc) StopEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopEpcRequest(input)
	return out, req.Send()
}

// StopEpcWithContext is the same as StopEpc with the addition of
// the ability to pass a context and additional request options.
//
// See StopEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) StopEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUseHotStandByEpc = "UseHotStandByEpc"

// UseHotStandByEpcRequest generates a "ksc/request.Request" representing the
// client's request for the UseHotStandByEpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See UseHotStandByEpc for more information on using the UseHotStandByEpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the UseHotStandByEpcRequest method.
//	req, resp := client.UseHotStandByEpcRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/UseHotStandByEpc
func (c *Epc) UseHotStandByEpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUseHotStandByEpc,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UseHotStandByEpc API operation for epc.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for epc's
// API operation UseHotStandByEpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/epc-2015-11-01/UseHotStandByEpc
func (c *Epc) UseHotStandByEpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UseHotStandByEpcRequest(input)
	return out, req.Send()
}

// UseHotStandByEpcWithContext is the same as UseHotStandByEpc with the addition of
// the ability to pass a context and additional request options.
//
// See UseHotStandByEpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Epc) UseHotStandByEpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UseHotStandByEpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package pdns

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opBindZoneVpc = "BindZoneVpc"

// BindZoneVpcRequest generates a "ksc/request.Request" representing the
// client's request for the BindZoneVpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See BindZoneVpc for more information on using the BindZoneVpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the BindZoneVpcRequest method.
//    req, resp := client.BindZoneVpcRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/BindZoneVpc
func (c *Pdns) BindZoneVpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBindZoneVpc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// BindZoneVpc API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation BindZoneVpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/BindZoneVpc
func (c *Pdns) BindZoneVpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BindZoneVpcRequest(input)
	return out, req.Send()
}

// BindZoneVpcWithContext is the same as BindZoneVpc with the addition of
// the ability to pass a context and additional request options.
//
// See BindZoneVpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) BindZoneVpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BindZoneVpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreatePdnsZone = "CreatePdnsZone"

// CreatePdnsZoneRequest generates a "ksc/request.Request" representing the
// client's request for the CreatePdnsZone operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreatePdnsZone for more information on using the CreatePdnsZone
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreatePdnsZoneRequest method.
//    req, resp := client.CreatePdnsZoneRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/CreatePdnsZone
func (c *Pdns) CreatePdnsZoneRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreatePdnsZone,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreatePdnsZone API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation CreatePdnsZone for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/CreatePdnsZone
func (c *Pdns) CreatePdnsZone(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreatePdnsZoneRequest(input)
	return out, req.Send()
}

// CreatePdnsZoneWithContext is the same as CreatePdnsZone with the addition of
// the ability to pass a context and additional request options.
//
// See CreatePdnsZone for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) CreatePdnsZoneWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreatePdnsZoneRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateZoneRecord = "CreateZoneRecord"

// CreateZoneRecordRequest generates a "ksc/request.Request" representing the
// client's request for the CreateZoneRecord operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateZoneRecord for more information on using the CreateZoneRecord
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateZoneRecordRequest method.
//    req, resp := client.CreateZoneRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/CreateZoneRecord
func (c *Pdns) CreateZoneRecordRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateZoneRecord,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateZoneRecord API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation CreateZoneRecord for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/CreateZoneRecord
func (c *Pdns) CreateZoneRecord(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateZoneRecordRequest(input)
	return out, req.Send()
}

// CreateZoneRecordWithContext is the same as CreateZoneRecord with the addition of
// the ability to pass a context and additional request options.
//
// See CreateZoneRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) CreateZoneRecordWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateZoneRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeletePdnsZone = "DeletePdnsZone"

// DeletePdnsZoneRequest generates a "ksc/request.Request" representing the
// client's request for the DeletePdnsZone operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeletePdnsZone for more information on using the DeletePdnsZone
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeletePdnsZoneRequest method.
//    req, resp := client.DeletePdnsZoneRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/DeletePdnsZone
func (c *Pdns) DeletePdnsZoneRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeletePdnsZone,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeletePdnsZone API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation DeletePdnsZone for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/DeletePdnsZone
func (c *Pdns) DeletePdnsZone(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeletePdnsZoneRequest(input)
	return out, req.Send()
}

// DeletePdnsZoneWithContext is the same as DeletePdnsZone with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePdnsZone for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) DeletePdnsZoneWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeletePdnsZoneRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteZoneRecord = "DeleteZoneRecord"

// DeleteZoneRecordRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteZoneRecord operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteZoneRecord for more information on using the DeleteZoneRecord
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteZoneRecordRequest method.
//    req, resp := client.DeleteZoneRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/DeleteZoneRecord
func (c *Pdns) DeleteZoneRecordRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteZoneRecord,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteZoneRecord API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation DeleteZoneRecord for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/DeleteZoneRecord
func (c *Pdns) DeleteZoneRecord(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteZoneRecordRequest(input)
	return out, req.Send()
}

// DeleteZoneRecordWithContext is the same as DeleteZoneRecord with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteZoneRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) DeleteZoneRecordWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteZoneRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribePdnsZones = "DescribePdnsZones"

// DescribePdnsZonesRequest generates a "ksc/request.Request" representing the
// client's request for the DescribePdnsZones operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribePdnsZones for more information on using the DescribePdnsZones
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribePdnsZonesRequest method.
//    req, resp := client.DescribePdnsZonesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/DescribePdnsZones
func (c *Pdns) DescribePdnsZonesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribePdnsZones,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribePdnsZones API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation DescribePdnsZones for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/DescribePdnsZones
func (c *Pdns) DescribePdnsZones(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribePdnsZonesRequest(input)
	return out, req.Send()
}

// DescribePdnsZonesWithContext is the same as DescribePdnsZones with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePdnsZones for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) DescribePdnsZonesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribePdnsZonesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeZoneRecord = "DescribeZoneRecord"

// DescribeZoneRecordRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeZoneRecord operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeZoneRecord for more information on using the DescribeZoneRecord
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeZoneRecordRequest method.
//    req, resp := client.DescribeZoneRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/DescribeZoneRecord
func (c *Pdns) DescribeZoneRecordRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeZoneRecord,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeZoneRecord API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation DescribeZoneRecord for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/DescribeZoneRecord
func (c *Pdns) DescribeZoneRecord(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeZoneRecordRequest(input)
	return out, req.Send()
}

// DescribeZoneRecordWithContext is the same as DescribeZoneRecord with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeZoneRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) DescribeZoneRecordWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeZoneRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyPdnsZone = "ModifyPdnsZone"

// ModifyPdnsZoneRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyPdnsZone operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyPdnsZone for more information on using the ModifyPdnsZone
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyPdnsZoneRequest method.
//    req, resp := client.ModifyPdnsZoneRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/ModifyPdnsZone
func (c *Pdns) ModifyPdnsZoneRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyPdnsZone,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyPdnsZone API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation ModifyPdnsZone for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/ModifyPdnsZone
func (c *Pdns) ModifyPdnsZone(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyPdnsZoneRequest(input)
	return out, req.Send()
}

// ModifyPdnsZoneWithContext is the same as ModifyPdnsZone with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyPdnsZone for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) ModifyPdnsZoneWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyPdnsZoneRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyZoneRecord = "ModifyZoneRecord"

// ModifyZoneRecordRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyZoneRecord operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyZoneRecord for more information on using the ModifyZoneRecord
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyZoneRecordRequest method.
//    req, resp := client.ModifyZoneRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/ModifyZoneRecord
func (c *Pdns) ModifyZoneRecordRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyZoneRecord,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyZoneRecord API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation ModifyZoneRecord for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/ModifyZoneRecord
func (c *Pdns) ModifyZoneRecord(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyZoneRecordRequest(input)
	return out, req.Send()
}

// ModifyZoneRecordWithContext is the same as ModifyZoneRecord with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyZoneRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) ModifyZoneRecordWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyZoneRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUnbindZoneVpc = "UnbindZoneVpc"

// UnbindZoneVpcRequest generates a "ksc/request.Request" representing the
// client's request for the UnbindZoneVpc operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See UnbindZoneVpc for more information on using the UnbindZoneVpc
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the UnbindZoneVpcRequest method.
//    req, resp := client.UnbindZoneVpcRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/UnbindZoneVpc
func (c *Pdns) UnbindZoneVpcRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUnbindZoneVpc,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UnbindZoneVpc API operation for pdns.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for pdns's
// API operation UnbindZoneVpc for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pdns-2016-03-04/UnbindZoneVpc
func (c *Pdns) UnbindZoneVpc(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UnbindZoneVpcRequest(input)
	return out, req.Send()
}

// UnbindZoneVpcWithContext is the same as UnbindZoneVpc with the addition of
// the ability to pass a context and additional request options.
//
// See UnbindZoneVpc for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pdns) UnbindZoneVpcWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UnbindZoneVpcRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}
